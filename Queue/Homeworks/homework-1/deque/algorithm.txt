the deque class will use the same methods from double linked list

$ properties:
-- front: will be the updated head, and it will be property function
-- rear: will be updated rear, and it will be property function
-- added_elements: the number of elements added
-- size: the size of deque
-- dobule_linked_list: the double linked list handle deque

$ methods:
-- enqueue_rear: append the new node to the end of linked list
#
add check full decorator
insert end function from dobule_linked_list
#
-- enqueue_front: append the new node to the front of linked list
#
add check full decorator
insert front function from dobule_linked_list
#
-- dequeue_front: remove the front node from the likned list
#
add check empty decorator
delete front function from dobule_linked_list
#
-- dequeue_rear: remove the end node from the likned list
#
add check empty decorator
delete end function from dobule_linked_list
#
-- isFull: check if the deque is full or not
#
return the boolean value of added_elements == size or not
#
-- isEmpty: check if the deque is empty or not
#
return the boolean value of added_elements == 0 or not
#
-- checkEmpty: decorator for handel if empty
#
if empty return not thing and tell the user, if not continue run function
#
-- checkFull: decorator for handel if full
#
if full return not thing and tell the user, if not continue run function
#