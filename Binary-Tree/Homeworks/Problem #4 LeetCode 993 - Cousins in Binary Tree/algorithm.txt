Cousins in Binary Tree => this problem is about check of two nodes x and y are Cousins or not
isCousins(self, root: Optional[TreeNode], x: int, y: int):
#
create getDepthWithParent(parent, target): this function get the depth of the target and each time pass the parent with it
##
if no parent or the partent value is target (in this case the target found in the root) or not parent.left and not parent.right: return (none, 0)
if left of parent is = target, or the right of parent is = target:
return current parent, 1
search_in_left = getDepthWithParent(parent.left, target)
if the search in left have return (by parent is set),increase the depth by 1 and return it 
search_in_right = getDepthWithParent(parent.right, target)
increase the depth by 1 and return search_in_right 
##
x_analysis = call getDepthWithParent for x and start from the root
y_analysis = call getDepthWithParent for y and start from the root

if x_analysis and y_return have the same depth and the parents are different return true
else return false
#
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
isCousinsV2(self, root: Optional[TreeNode], x: int, y: int):
#
create getDepthWithParent(root, parent, value, depth=0): this function get the depth of the value and each time pass the parent with it with increase the depth
##
if not root, none, depth

if root value == value, return parent, depth

init left_parent, left_depth = getDepthWithParent(root.left, root, value, depth+1)

if the left_parent found (this mean we arraive to the value), return left_parent, left_depth

return getDepthWithParent(root.right, root, value, depth+1)
##
x_parent, x_depth= call getDepthWithParent for x and start from the root and parent none
y_parent, y_depth = call getDepthWithParent for y and start from the root and parent none

if x_depgth and y_depth have the same depth and the parents are different return true
else return false
#