is_operator(char) => this function check if the operator is operator or not
#
if the char in operators list return true
else return false
#
$$$$$$$$$$$
build_expression_tree(expression) => this function take the postfix expression and build a tree insted of it
#
init last_root with none
loop throw the expression but in reverse way and get the index:
#
init current_element
increae the length
if no root, set root and create current element  and set last_root and continue and increase the length
if last root dont have right: add current element to right
else: add current element to left

if current is operator:
--
set last_root = current element
--
-
#
#
build_expression_tree_v2(expression) => this function take the postfix expression and build a tree insted of it
#
init nodes_stack = []
for each char in expression:
init node, the value of it = char
-
if char is is_operator:
--
right of node = last elelemnt in nodes_stack
left of node = the previous of the last element in the nodes_stack
pop stack 2 times
--
append current node to the nodes stack
-
set root = the last element in the stack

#
