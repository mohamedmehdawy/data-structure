try to simulate call stack of functions like recursion but using iterative way with stack

inorder_iterative() => this function print the tree inorder using iterative way
main idea if i show the node just 1 this mean i should call the left, and if show is 2 mean i should call the right
and if show is 3 this mean i handle left and right and should remove current node from the stack
#
create stack and init it with root and show number will be 0

while (loop if stack is not empty):
##
current_node_data = will be the last one in the stack

if current_node_data is None, pop from the stack and continue
if the current node not have left and right: print it and remove from the stack (using pop) and go to the next iteration
increase show by 1

if the current_node[1] is 1: append the left of current node to the stack
if the current_node[1] is 2: print firs the current node (because we need to print (left - current - right)) append the right of current node to the stack 
else: remove from the stack (using pop)
##
after end print new line
#

inorder_iterative_v2 () => this function print the tree inorder using iterative way
main idea if we arraive to the node second time this mean this is completed and need to add it to the result
[node, is_completed]
#
init the stack = []
init result = []
append root to the stack with false = stack.append([root, false])

loop untile the stack will be embty
##
get current_node, is_completed = last element in the stack
remove last element in the stack

if current node is completed, append it to the result
else:
-- if current node have right, append it to the stack with false
-- append current node to the stack with true
-- if current node have left, append it to the stack with false 
##

return result
#