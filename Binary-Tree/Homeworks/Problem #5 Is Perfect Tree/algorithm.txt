main idea:
the tree will be perfect if the all levels is full
so i need to:
-- each subtree has left and right, and if left is leaf the right should be leaf
-- left side and right side should have the same level

first_not_perfect_check() => this function handle first check for the tree if no have any node or 1 node
#
return length <= 1
#
# v1 #
sub_is_perfect(root, level=0): this function check if the sub tree tree is perfect or not
##
if no root, return [true, level]

check is perfect for left side = is_perfect(root.left, level+ 1)
if check for left is false, return [false, level]
check is perfect for right side = is_perfect(root.left, level+ 1)

if left and right have same level and right is, return [true, left level (left and right have same level)]
return [false, max of (left and right level)]
##
is_perfect(): this function check if the tree is perfect or not
#
return sub_is_perfect(root)[0]
#

# v2 #
check if the tree is perfect or not insted of tree height
_tree_height(root): this function get the hegiht of the sub tree
#
if the root is none, return -1
return 1 + the max left and right
#
tree_height(): this function return the height of the tree
#
return _tree_height(root)
#

_is_perfect_v2(root, height): this function check if the sub tree is perfect or not insted of the height
#
if the root doesnt have left and right the height must be 0 if this is pefect, return tree is the height is 0

if left is found and right not, return false
if right is found and left not, return false

return check of left with height -1 and the right
#
is_perfect_v2(): this function return the status of the tree is perfect or not
#
get the hegiht of the tree
return _is_perfect_v2(tree root, tree height)
#

# v3 #
is_perfect_v3(): this function check if the tree is perfect or not and return the status of it
#
if the length is less than or equal 1 (empty or just have 1 node): return false
init new_root = root, and index = 0, and stack = []

handel first case if new_root has left and right: append the 2 nodes to stack,
else return fasle
loop until the index is greater than or equal the length - 2 (-2 because the root node and we start from 0):
##
set new_root with stack[index]
if stack length % 2 != 0: return false (in this case this is not perfect because the stack should have 2 peace for each root)
left_is_added = fasle
if the left of the new root is not empty: append to the stack, and set left_is_added = True
if the right of new root is not empty : append to the stack
elif left is found (left is found the right not): return false
increase index by 1
set new_root = the next one (this will be the right)
if new_root is not found, return false
check if we dont add any thing from the left and we have node in the right return false
if the left of the new root is not empty and left_is_added: append to the stack
if the right of new root is not empty and left_is_added: append to the stack
increase index by 1
##

if we end the loop this mean the tree is perfect so return true
#

# v3 #
_total_nodes(current) => this function return the total nodes in the tree
#
if the current not found, return 0

return 1 + _total_nodes(current.left) + _total_nodes(current.right)
#
total_nodes() => this function return the total nodes in the tree
#

return _total_nodes(root)
#
is_perfect_v4() => this function check if the tree is perfect or not using forumala way
$$
the idea is each level to be perfect should have 2 ^ level,
so we will calc the total number of the nodes insted of the height and check if 
all nodes we have = the total from the height
$$
#
tree_height = _tree_height()
tree_total_nodes = _total_nodes()
perfect_nodes_number = (2 ^ h+1) - 1
return perfect_nodes_number == perfect_nodes_number
#